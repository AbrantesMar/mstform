
* a Group concept that aggregates validation values. Should deliver true or
  false.

* implement show error after blur, show error after pause.

* a context/env system. We want custom context and the env from MST.

* converters should have access to the context. This way we can declare
  systemwide policy for converters.

* we want to selectively enable and disable, as well as make them
  visible and invisible, based on external information. Potentially
  we also want display-only.

  disabled state can be passed into input field.

  invisible is trickier: form.item doesn't support it. we could make our own
  item that accepts a hidden. Or we could create another component that takes
  care of hidden (and display-only)

* externalValidation and whole-form validation:

  can we define whole form validation as a special case of
  external validation or the other way around?

A Group concept that aggregates validation values. It could deliver more than
true or false if we want to display specifically what's wrong; perhaps a list
of error objects.

A Group does the following:

* present access to fields (and sub-forms) in order.

* present random access to fields.

* gives aggregate validation values.


A Group is defined separately in relationship to the underlying MST model:

const aGroup = new Group(M, ['foo', 'bar']);

You can access a form accessor in terms of a group:

const o = aGroup.access(state);

It's an error if the group isn't compatible.

You can ask the group whether it's valid (which includes any sub-forms), for
its underlying accessors in order, and like a FormAccessor.

You can also access a repeating form accessor in terms of a group:

const o = aGroup.access(state.repeatingForm('foo').index('3'))

There's a sanity check for developers where given a form we can verify that
it's entirely covered by a given list of groups.
